// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ARTIST
}

model User {
  id         String       @id @default(uuid())
  email      String       @unique
  username   String
  password   String
  image      String?
  role       Role         @default(USER)
  album      Album[]
  playlist   Playlist[]
  musicViews MusicViews[]
  library    Library?
  Comment    Comment[]

  @@map("user")
}

model Album {
  id          String   @id @default(uuid())
  name        String
  description String
  releaseDate DateTime
  imageUrl    String
  authorName  String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  music       Music[]
  library     Library? @relation(fields: [libraryId], references: [id])
  libraryId   String?

  @@map("album")
}

model Music {
  id          String       @id @default(uuid())
  imageUrl    String
  authorName  String
  name        String
  description String
  releaseDate DateTime
  musicUrl    String
  letter      Json?
  musicViews  MusicViews[]
  author      Album        @relation(fields: [authorId], references: [id])
  authorId    String
  playlist    Playlist?    @relation(fields: [playlistId], references: [id])
  playlistId  String?
  library     Library?     @relation(fields: [libraryId], references: [id])
  libraryId   String?
  comment     Comment[]

  @@map("music")
}

model Comment {
  id      String @id @default(uuid())
  comment String
  music   Music  @relation(fields: [musicId], references: [id])
  musicId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@map("comment")
}

model Playlist {
  id        String   @id @default(uuid())
  name      String
  music     Music[]
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  library   Library? @relation(fields: [libraryId], references: [id])
  libraryId String?

  @@map("playlist")
}

model Library {
  id       String     @id @default(uuid())
  author   User       @relation(fields: [authorId], references: [id])
  authorId String     @unique
  music    Music[]
  album    Album[]
  playlist Playlist[]

  @@map("library")
}

model MusicViews {
  id       String @id @default(uuid())
  count    Int?   @default(1)
  music    Music  @relation(fields: [musicId], references: [id])
  musicId  String
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  @@unique(fields: [musicId, authorId], name: "musicId_authorId")
  @@map("musicviews")
}
